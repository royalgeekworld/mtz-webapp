---
title: "Building Pale Moon: GNU Linux"
tags:
  - Build
  - "Pale Moon"
  - Instructions
  - Linux
  - CentOS
  - AlmaLinux
  - Debian
  - Arch
  - Gentoo
  - Rice
---
[p]These instructions are for building Pale Moon 29.4.1 and newer and assumes you want to build the latest release.[/p]

[header="Prerequisites"]

[section="Basic Dependencies"]

[ul]
  [li]GNU Compiler Collection (see below)[/li]
  [li]Python 2.7.x[/li]
  [li]Exactly Autoconf 2.13[/li]
  [li]Yasm 1.2.0 or higher[/li]
  [li]XZ[/li]
  [li]Plenty of free disk space[/li]
  [li]At least 6 GB RAM free depending on number of processor cores[break](limit using the [codeline=bash]mk_add_options MOZ_MAKE_FLAGS="-jN"[/codeline] option)[/li]
  [li]Various distribution specific development packages[/li]
  [li]General system requirements for running the application itself[/li]
[/ul]

[section="GCC Compatibility"]

[table width="1000px" cellpadding="4" cellspacing="1" class="wikiTable" style="table-layout: fixed; margin: 0 auto;"]
	[tbody]
		[tr]
      <!-- Padding Account: 1000 - 30px -->
      [th width="75px"]Version[/th]
      [th width="300px"]Status[/th]
      [th width="595px"]Notes[/th]
    [/tr]
    [tr]
      [td][b]11.x[/b][/td]
      [td]Pending Support[/td]
      [td][i]Waiting for [i]AlmaLinux 8.5[/i].[/i][/td]
    [/tr]
    [tr]
      [td][b]10.x[/b][/td]
      [td]Experimental Support[/td]
      [td][i]Build issues still crop up.[/i][/td]
    [/tr]
    [tr]
      [td][b]9.x[/b][/td]
      [td]Generally Considered Stable[/td]
      [td][i]Requires more tangible usage testing.[/i][/td]
    [/tr]
    [tr]
      [td][b]8.x[/b][/td]
      [td]Recommended[/td]
      [td][i]Mid-term tested. Currently in-use for BinOC Applications.[/i][/td]
    [/tr]
    [tr]
      [td][b]7.x[/b][/td]
      [td]Recommended[/td]
      [td][i]Long-term tested. Currently in-use for MCP Applications.[/i][/td]
    [/tr]
    [tr]
      [td][b]6.x[/b][/td]
      [td]Deprecated, Pending Unsupported[/td]
      [td][i]Bad track record, generally OK for Debian-based systems.[/i][/td]
    [/tr]
    [tr]
      [td][b]5.x[/b][/td]
      [td]Deprecated, Pending Unsupported[/td]
      [td][i]Mixed stability based on distributions and minor versions.[/i][/td]
    [/tr]
    [tr]
      [td][b]4.9[/b][/td]
      [td]Deprecated, Pending Unsupported[/td]
      [td][i]Rock solid for older distributions and systems.[/i][/td]
    [/tr]
    [tr]
      [td][b]<=4.8[/b][/td]
      [td]Unsupported[/td]
      [td][i]Used Pre-Unified XUL Platform.[/i][/td]
    [/tr]
  [/tbody]
[/table]

<!-- ============================================================================================================== -->

[header="Getting the source"]

These instructions assume you are going to create a directory in your home directory (~) called palemoon-source. You can, of course, put the source code anywhere you want as long as the path does not contain any spaces.[/p]

[section="Using the source archives"]

[p]This requires downloading source archives from the Pale Moon Archive Server:[/p]

[ul]
  [li]Navigate to the [url=http://archive.palemoon.org/source/]source directory[/url] on the Archive Server and download the desired version of the source tarball.[/li]
  [li]The archive filename is in the following format (where n.n.n is the Pale Moon version): [codeline=bash]palemoon-n.n.n-source.tar.xz[/codeline][/li]
  [li]Extract the source code to the desired location.[/li]
  [li]Proceed to the "Build instructions" below.[/li]
[/ul]

[section="Using git"]

[p]Git instructions for older versions of Pale Moon are [link=/archive/build-git-source/]located here[/link].[/p]

<!-- ============================================================================================================== -->

[header="Distribution specifics"]

[section="CentOS 7"]
[p][i]The generic x86_64 GTK2 Linux package that we distribute is built on CentOS 7 with GCC 7.x.[/i][/p]

[p]Install the required build dependencies by executing the following commands:[/p]

[code=bash]yum install epel-release

yum install gtk2-devel dbus-glib-devel GConf2-devel autoconf213 yasm \
mesa-libGL-devel alsa-lib-devel libXt-devel zlib-devel openssl-devel \
sqlite-devel bzip2-devel pulseaudio-libs-devel

yum groupinstall 'Development Tools'

yum install centos-release-scl

yum install devtoolset-7-toolchain
[/code]

[p]Because the system compiler is too old we need to activate the GCC 7 Software Collection environment before we can build. To do so execute the following command:[/p]
[code=bash]scl enable devtoolset-7 bash[/code]

[p]If you are building a GTK3 build then you will need the development package for it. To install it execute the following command:[/p]
[code=bash]yum install gtk3-devel[/code]

[section="Debian"]
[p]Install the required build dependencies by executing the following command:[/p]

[code=bash]apt-get install build-essential libgtk2.0-dev libdbus-glib-1-dev autoconf2.13 \
yasm libegl1-mesa-dev libasound2-dev libxt-dev zlib1g-dev libssl-dev \
libsqlite3-dev libbz2-dev libpulse-dev libgconf2-dev libx11-xcb-dev \
zip python2.7 python-dbus
[/code]

[section="Arch"]

[p]Install the required build dependencies by executing the following command:[/p]
[code=bash]pacman -Syu gtk2 dbus-glib desktop-file-utils libxt mime-types \
alsa-lib startup-notification python2 autoconf2.13 unzip zip yasm \
libpulse gcc
[/code]

[section="Gentoo"]

[p]Install the required build dependencies by executing the following commands:[/p]

[code=bash]# GCC 7 unmask
(mkdir /etc/portage/package.unmask; \
echo "sys-devel/gcc:7.5.0" >> /etc/portage/package.unmask/gcc) || \
  echo "sys-devel/gcc:7.5.0" >> /etc/portage/package.unmask
# Compile time dependencies
emerge -n1 sys-devel/gcc:7.5.0 ~sys-devel/autoconf-2.13 \
dev-lang/python:2.7 dev-lang/perl dev-lang/yasm

# Runtime time dependencies
emerge -n x11-libs/libXt app-arch/zip media-libs/freetype media-libs/fontconfig \
sys-libs/glibc dev-libs/libffi sys-apps/dbus dev-libs/dbus-glib x11-libs/gtk+:2 \
media-sound/pulseaudio net-wireless/wireless-tools

# Set the "x264" USE flag for media-video/ffmpeg and emerge it
(mkdir /etc/portage/package.use; \
echo "media-video/ffmpeg x264" >> /etc/portage/package.use/ffmpeg) || \
  echo "media-video/ffmpeg x264" >> /etc/portage/package.use
emerge -nN ffmpeg
[/code]

[p]Add the following to the .mozconfig file you will create in Build Instructions:[/p]
[code=bash]export CC=gcc-7.5.0
export CXX=g++-7.5.0
mk_add_options PYTHON=/usr/bin/python2
mk_add_options AUTOCONF=/usr/bin/autoconf-2.13
[/code]

<!-- ============================================================================================================== -->

[header="Build instructions"]

[section="Configure"]

[p]Create a file called .mozconfig in the source folder you cloned or unpacked the source to. Make sure it contains at least the following for a close-to-official build:[dblbreak]

[b].mozconfig file[/b][break]
[code=bash]# Clear this if not a 64bit build
_BUILD_64=1

# Set GTK Version to 2 or 3
_GTK_VERSION=2

# Standard build options for Pale Moon
ac_add_options --enable-application=palemoon
ac_add_options --enable-optimize="-O2 -w"
ac_add_options --enable-default-toolkit=cairo-gtk$_GTK_VERSION
ac_add_options --enable-jemalloc
ac_add_options --enable-strip
ac_add_options --enable-devtools
ac_add_options --enable-av1
ac_add_options --disable-eme
ac_add_options --disable-webrtc
ac_add_options --disable-gamepad
ac_add_options --disable-tests
ac_add_options --disable-debug
ac_add_options --disable-necko-wifi
ac_add_options --disable-updater
ac_add_options --with-pthreads

# Please see https://www.palemoon.org/redist.shtml for restrictions when using the official branding.
ac_add_options --enable-official-branding
export MOZILLA_OFFICIAL=1

# Processor architecture specific build options
if [ -n "$_BUILD_64" ]; then
  ac_add_options --x-libraries=/usr/lib64
else
  ac_add_options --x-libraries=/usr/lib
fi

export MOZ_PKG_SPECIAL=gtk$_GTK_VERSION
[/code]
[/p]

[p][i]Note: LESS IS MORE! There are some pre-made build configs out there that have a lot of options listed, often with insane resulting build configurations. [b]Do not use those[/b] and stick to the instructions here.[/i][/p]

[section="Build"]

[p]Start the build:[/p]

[code=bash]./mach build[/code]

[p]Be patient. Building could take a long time. Your PC will be fully occupied compiling and linking the browser (you can expect 100% CPU usage throughout and lots of memory use - provide ample cooling) and you should not be using it for anything else that is resource-intensive at this time. Especially memory-intensive applications should be avoided because it can cause issues with the linker (memory fragmentation) resulting in a very unstable browser.[/p]

[section="Strip/package"]

[p]After building is completed, you can take the resulting binaries for a test run in the object directory directly (see the on-screen instructions at the end of the build process) but it will not be complete yet. You need to strip and package the browser to integrate additional code, pack up the resource files, and have a ready-to-use browser. You do this by running:

[code=bash]./mach package[/code]

This will create a properly packaged xz compressed tarball in your object folder under the Pale Moon source folder. e.g. for linux 64bit with GTK 2:

[code=bash]~/palemoon-source/obj-x86_64-pc-linux-gnu/dist/palemoon-{version}.linux-x86_64-gtk2.tar.xz[/code][/p]
