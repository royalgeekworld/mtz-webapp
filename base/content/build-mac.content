[p]These instructions are for building Pale Moon 28.9.* and newer and assumes you want to build the latest release.[/p]

[header="Prerequisites"]

[ul]
  [li]Xcode version 8 or higher and command line tools[/li]
  [li]Python 2.7.3 to 2.7.latest[/li]
  [li]Exactly Autoconf 2.13[/li]
  [li]Yasm 1.2.0 or higher[/li]
  [li]Plenty of free disk space[/li]
  [li]At least 8 GB RAM free depending on number of processor cores (limit using the [codeline=bash]mk_add_options MOZ_MAKE_FLAGS="-jN"[/codeline] option)[/li]
  [li]MacOS X 10.7 SDK (can be acquired from [url=https://github.com/phracker/MacOSX-SDKs]GitHub[/url])[/li]
  [li]General system requirements for running the application itself[/li]
[/ul]

<!-- ============================================================================================================== -->

[header="Getting the source"]

[p]The [url=https://repo.palemoon.org/MoonchildProductions/Pale-Moon]Pale Moon[/url] source code along with the [url=https://repo.palemoon.org/MoonchildProductions/UXP]Unified XUL Platform[/url] source code are available on our self-hosted Gitea instance.[dblbreak]

These instructions assume you are going to create a directory in your home directory (~) called palemoon-source. You can, of course, put the source code anywhere you want as long as the path does not contain any spaces.[/p]

[section="Using git"]

[p]This is the simplest method and git is bundled with Xcode.[/p]

[ul]
  [li]Install the [url=https://developer.apple.com/download/more/]Xcode[/url] command line tools[/li]
  [li]Open a terminal shell and change directory to the desired source location, e.g. [codeline=bash]cd ~/palemoon-source/[/codeline][/li]
  [li]Execute the following commands:
[code=bash]git clone https://repo.palemoon.org/MoonchildProductions/Pale-Moon.git ./
git submodule init && git submodule update
git checkout release && git submodule update
[/code]
  [/li]
  [li]Proceed to "Build dependencies" below.[/li]
[/ul]

[section="Using the source archives"]

[p]This requires downloading source archives from both the Pale Moon and Unified XUL Platform repository and is more complicated:[/p]

[ul]
  [li]Navigate to [url=https://repo.palemoon.org/MoonchildProductions/Pale-Moon/releases/latest]the release page[/url] on the Pale Moon repository and download the tar.gz archive for Pale Moon.[/li]
  [li]Extract the source code to the desired location e.g. [codeline=bash]~/palemoon-source[/codeline][/li]
  [li]Then using the link in "Built with the Unified XUL Platform - {Month} {Day}, {Year} release", navigate to the matching UXP release page and download the tar.gz archive for the platform source code.[/li]
  [li]Extract that archive to the platform directory inside the Pale Moon source directory e.g. [codeline=bash]~/palemoon-source/platform[/codeline][/li]
[/ul]

[p][i][b]Note[/b]: You will need to extract the [i]contents[/i] of the Pale-Moon-XXX or UXP-XXX directory to the locations indicated above.[/i][/p]

[p]The following is not recommended for Machintosh. However, if you obtain the source archives in a non-tar form, e.g. zip or 7z, then you will have to correct file permissions on the source tree.[/p]

[code=bash]chmod -R 744 palemoon-source[/code]

<!-- ============================================================================================================== -->

[header="Build dependencies"]

[p][i][url=https://www.macports.org/install.php]Install MacPorts[/url][/i][/p]
[p]Install the required build dependencies by executing the following commands:[/p]

[code=bash]port install autoconf213
port install yasm

# If your MacOS is missing python or it is too old
port install python27[/code]

<!-- ============================================================================================================== -->

[header="Build instructions"]

[section="Configure"]

[p]Create a file called .mozconfig in the source folder you cloned or unpacked the source to. Make sure it contains at least the following for a close-to-official build:[dblbreak]

[b].mozconfig file[/b][break]
[code=bash]# Standard build options for Pale Moon
ac_add_options --enable-application=palemoon
ac_add_options --enable-optimize=-O2
ac_add_options --enable-jemalloc
ac_add_options --enable-strip
ac_add_options --enable-devtools
ac_add_options --disable-eme
ac_add_options --disable-webrtc
ac_add_options --disable-gamepad
ac_add_options --disable-tests
ac_add_options --disable-debug
ac_add_options --disable-necko-wifi
ac_add_options --disable-updater
ac_add_options --with-macos-sdk=/Path/to/SDKs/MacOSX10.7.sdk

# Please see https://www.palemoon.org/redist.shtml for restrictions when using the official branding.
ac_add_options --enable-official-branding
export MOZILLA_OFFICIAL=1

# For versions after 28.12.0
ac_add_options --enable-phoenix-extensions

# Uncomment if using clang++ from Xcode 10 or higher
# export CXX="/usr/bin/clang++ -std=gnu++11 -stdlib=libc++"
[/code]
[/p]

[p][i]Note: LESS IS MORE! There are some pre-made build configs out there that have a lot of options listed, often with insane resulting build configurations. [b]Do not use those[/b] and stick to the instructions here.[/i][/p]

[section="Build"]

[p]Start the build:[/p]

[code=bash]./mach build[/code]

[p]Be patient. Building could take a long time. Your Mac will be fully occupied compiling and linking the browser (you can expect 100% CPU usage throughout and lots of memory use - provide ample cooling) and you should not be using it for anything else that is resource-intensive at this time. Especially memory-intensive applications should be avoided because it can cause issues with the linker (memory fragmentation) resulting in a very unstable browser.[/p]

[section="Strip/package"]

[p]After building is completed, you can take the resulting binaries for a test run in the object directory directly (see the on-screen instructions at the end of the build process) but it will not be complete yet. You need to strip and package the browser to integrate additional code, pack up the resource files, and have a ready-to-use browser. You do this by running:

[code=bash]./mach package[/code]

This will create a properly packaged disk image in your object folder under the Pale Moon source folder. e.g. for Mac 64bit:

[code=bash]~/palemoon-source/obj-x86_64-apple-darwin{kernel-version}/dist/palemoon-{version}.mac64.dmg[/code][/p]
